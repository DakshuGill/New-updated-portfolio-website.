@import url("hhps://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&displY=swap");

* {
    margin : 0;
    padding : 0;
    box-sizing : border-box;
    text-decoration : none;
    border : none;
    outline : none;
    font-family : "Poppins", sans-serif;
}

/* root selector always selects the root element i.e <html> element. */
:root {
    --bg-color: #081b29;
    --main-color: #00abf0;
    --text-color: #451a1a;
    --second-text-color: #555;
    --white-color: #fff;
    --cover-color: linear-gradient(45deg, #00abf0, #006e9a);
    --pages-color: linear-gradient(90deg, #fff, #ddd);
    --border: .150rem solid #00abf0;
    --box-shadow: 0 0 .6rem rgba(0,0,0,.2);
}

body {
    display : flex;
    justify-content : center;
    align-items : center;
    min-height : 100vh;
    background : var(--bg-color);
    color : var(--text-color);
    overflow : hidden;
}

/* .wrapper {
    position : relative;
    width : 66rem;
    height : 45rem;
    padding : 2rem;
} */

.wrapper {
    position : relative;
    width : 66rem;
    height : 45rem;
    padding : 2rem;
    perspective : 250rem;
    animation : show-animate 2s forwards;
    /* background: yellow; */
} 

@keyframes show-animate {
    0%,
    30% {
        opacity : 0;
        transform : rotate(-20deg);
    }
    100% {
        opacity : 1;
        transform : rotate(0deg);
    }
}

.cover {
    position : absolute;
    width : 50%;
    height : 100%;
    top : 0;
    left : 0;
    background : var(--cover-color);
    box-shadow: var(--box-shadow);
    border-top-left-radius: .6rem;
    border-bottom-left-radius: .6rem;
    transform-origin : right;
}

.cover.cover-left {
    /* z-index is the CSS property that controls the stacking order of overlapping elements on a page. */
    z-index: -1;
}

.cover.cover-right {
    z-index : 100; 
    transition : transform 1s cubic-bezier(.645, .045, .355, 1);
}

.cover.cover-right.turn {
    /* To rotate the image by 180 degrees, we need to add rt-180 transformation parameter to the URL */
    transform : rotateY(180deg);
}

.book {
    position : relative;
    width : 100%;
    height : 100%;
    display : flex;
    perspective : 250rem;
}

.book .book-page {
    position : relative;
    width : 50%;
    height : 100%;
    background : var(--pages-color);
    box-shadow : 0 0 .6rem rgba(0, 0, 0, .1);
    display: flex;
    padding : 1.5rem;
}

.profile-page { 
    /* background: seagreen; */
    display: flex;
    /* row is the default value and arranges flex items horizontally. row-reverse is similar to row , but arranges flex items in the opposite order. column arranges flex items vertically. */
    flex-direction : column;
    justify-content : center;
    align-items: center;
}

.profile-page img{
max-width : 190px;
border-radius : 15%;
border : .50rem solid var(--main-color);
margin-bottom : .9rem;
}

.profile-page h1{
    font-size : 2.7rem;
    line-height : 1;
}

.profile-page h3{
    font-size : 1.5rem;
    color : var(--main-color);
}

.profile-page .social-media {
    margin : .6rem 0 .8rem;
}

/* Rem (short for “root-em”) units dictate an element's font size relative to the size of the root element. */
.profile-page .social-media a{
   display : inline-flex; 
   /* The display: inline-flex property will make the element a flexbox container and the container will be inline. They can adjust their size. The items inside the container are also inline. */
   justify-content: center;
   align-items: center;
   width : 2.5rem;
   height : 2.5rem;
   background: transparent;
   border : var(--border);
   border-radius : 50%;
   font-size : 1.3rem;
   color : black;
   margin : 0 .2rem;
   transition : .5s;
}

.profile-page .social-media a:hover {
    background: var(--main-color);
    color : var(--white-color);
}
 
.profile-page p{
    text-align : justify;
}

.profile-page .btn-box {
    margin-top : 1.2rem;
}

.btn {
    display : inline-flex;
    justify-content: center;
    align-items: center;
    width : 9.5rem;
    height : 3rem;
    background : var(--main-color);
    border : var(--border);
    border-radius : .3rem;
    font-size : 1rem;
    color : var(--white-color);
    font-weight : 500;
    margin : 0 1rem;
    transition : .5s;
}

.btn:hover {
    background: transparent;
    color : var(--main-color);
}

/* The :nth-child() CSS pseudo-class matches elements based on the indexes of the elements in the child list of their parents. In other words, the :nth-child() selector selects child elements according to their position among all the sibling elements within a parent element. */
.btn-box .btn:nth-child(2) {
     background: transparent;
     color : var(--main-color);
}

.btn-box .btn:nth-child(2):hover {
    background: var(--main-color);
    color : var(--white-color);
}

.book-page.page-right {
    position : absolute;
    right : 0;
    /* preserve-3d: This value enables the child elements to preserve their 3D position. */
    transform-style: preserve-3d;
    transform-origin : left;
    transition : transform 1s cubic-bezier(.645, .045, .355, 1);
}

.book-page.page-right.turn {
    /* To rotate the image by 180 degrees, we need to add rt-180 transformation parameter to the URL */
    transform : rotateY(-180deg);
}

.book-page .page-front,
.book-page .page-back {
    position : absolute;
    top : 0;
    left : 0;
    width : 100%;
    height : 100%;
    background : var(--pages-color);
    padding : 1.5rem 2rem;
}

.book-page .page-front {
    /*The transform CSS property lets you rotate, scale, skew, or translate an element.  */
    transform : rotateY(0deg) translateZ(1px);
}

.book-page .page-back {
    transform : rotateY(180deg) translateZ(1px);
}

.title {
    text-align : center;
    margin-bottom : 1.5rem;
}

.workeduc-box {
    /* The border-left-style CSS property sets the line style of an element's left border . */
    border-left : var(--border);
}

.workeduc-box .workeduc-content {
    position : relative;
    /* background : yellow; */
    padding-left : 1.6rem;
    margin-bottom : 1.2rem;
}

.workeduc-content .year {
    color : var(--main-color);
}

.workeduc-box .workeduc-content::before {
    content : '';
    position : absolute;
    top : 0;
    left : -0.65rem;
    width : 1.2rem;
    height : 1.2rem;
    background : var(--main-color);
    border-radius : 50%;
}

.workeduc-content .year i{
    margin-right : .4rem;
}

/* The transform: translate(-50%, -50%); CSS property is used to move an element horizontally and vertically by a specified percentage of its own size. It is often used to center an element both horizontally and vertically within its parent container. */
.number-page {
    position : absolute;
    bottom : 1.2rem;
    left : 50%;
    transform : translateX(-50%);
}

.nextprev-btn {
    position : absolute;
    width : 2rem;
    bottom : .9rem;
    right : 1.5rem;
    height : 2rem;
    cursor : pointer;
    font-size : 2rem;
    color : var(--second-text-color);
    display : inline-flex;
    justify-content : center;
    align-items : center;
    transition : .5s;
}

.nextprev-btn:hover {
color : var(--main-color);
}

.nextprev-btn.back {
    left : 1.5rem;
}

.projects-exhibition {
    display : flex;
    flex-wrap : wrap;
    gap : 1.5em;
    /* The flex-wrap CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines */
}

/* Margin is the space outside of a page element. Padding defines the space surrounding content within a web element. */
/* The flex CSS allows to set the length of flexible items. */

.projects-exhibition .projects-content {
    flex : 1 1 10rem;
    border : var(--border);
    border-radius : .5rem;
    padding : .8rem .5rem 1.1rem;
    text-align : center;
    transition : .3s ease;
}

.projects-exhibition .projects-content:hover{
box-shadow  :var(--box-shadow);
}

.projects-content i  {
font-size : 2.5rem;
color : var(--main-color);
}

.projects-content h3 {
    font-size : 1.1rem;
}

.projects-content p {
    margin : .2rem 0 .8rem;
}

.projects-content .btn {
width : 8rem;
height : 2.5rem;
}

.skills-box {
    display : flex;
    flex-wrap : wrap;
    gap : 1.5rem;
}

.skills-box .skills-content {
    flex : 1 1 20rem;
}

.skills-content h3 {
    font-size : 1.5rem;
    line-height : 1;
    margin-bottom : .6rem;
}

.skills-content .content {
    display : flex;
    flex-wrap : wrap;
    gap : .8rem;
}

.skills-content .content span {
    display : inline-flex;
    flex-direction: column;
    width : 6rem;
    height : 3.5rem;
    border : var(--border);
    border-radius : .4rem;
    font-weight : 500;
    justify-content: center;
    align-items: center;
    transition : .3s ease;
}

.skills-content .content span:hover {
    /* The CSS box-shadow property is used to apply one or more shadows to an element. */
    box-shadow : var(--box-shadow);
}

.skills-content .content span i {
    font-size : 2rem;
    color : var(--main-color);
}

.skills-content .content-1 {
    display : flex;
    flex-wrap : wrap;
    gap : .8rem;
}

.skills-content .content-1 span {
    display : inline-flex;
    flex-direction: column;
    width : 6rem;
    height : 2.5rem;
    border : var(--border);
    border-radius : .4rem;
    font-weight : 500;
    justify-content: center;
    align-items: center;
    transition : .3s ease;
}

.skills-content .content-1 span:hover {
    /* The CSS box-shadow property is used to apply one or more shadows to an element. */
    box-shadow : var(--box-shadow);
}

.skills-content .content-1 span i {
    font-size : 1rem;
    color : var(--main-color);
}

.portfolio-box .img-box {
    display : flex;
    width : 100%;
    height : 18rem;
    /* background : green; */
    border : var(--border);
    border-radius : .5rem;
    overflow : hidden;
}

.portfolio-box .img-box img {
width : 100%;
object-fit : cover;
transition : .5s ease;
}

.portfolio-box .img-box:hover img {
    transform : scale(1.5);
}

.portfolio-box .info-box {
    /* background: yellow; */
    margin : 1rem 0 1.5rem;
}

.portfolio-box .info-box .info-title {
    /* background: seagreen; */
    display : flex;
    justify-content : space-between;
    align-items : center;
    margin-bottom : 1rem; 
}

.portfolio-box .info-box .info-title h3 {
    font-size : 1.2rem;
}

.portfolio-box .info-box .info-title a {
    /* background: red; */
    display : flex;
    align-items : center;
    color : var(--main-color);
}

.portfolio-box .info-box .info-titl a i {
    margin-left : .3rem;
}

.portfolio-box .info-box p:nth-of-type(1) {
    font-weight : 600;
}

.portfolio-box .btn-box {
    display : flex;
    justify-content : center;
    align-items: center;
}

.portfolio-box .btn-box .btn {
    margin : 0 1.15rem;
}

.contact-box {
    text-align : center;
}

.contact-box .field {
    width : 100%;
    background : transparent;
    border : var(--border);
    border-radius : .3rem;
    padding : .8rem;
    font-size : 1rem;
    color : var(--text-color);
    margin-bottom : 1.5rem;
}

.contact-box .field::placeholder { 
    color : var(--text-color);
}

.contact-box .btn {
    cursor : pointer;
}

.back-profile {
position : absolute;
bottom : 1.2rem;
right : 2rem;
width : 2rem;
height : 2rem;
background : transparent;
border : var(--border);
border-radius : .3rem;
font-size : 1.1rem;
justify-content: center;
align-items: center;
color : var(--main-color);
display : inline-flex;
transition : .5s;
}

.back-profile:hover {
    background : var(--main-color);
    color : black;
}

.back-profile p{
    position : absolute;
    top : 0;
    left : 50%;
    transform : translateX(-50%) scale(.5);
    font-size : 1rem;
    color : var(--main-color);
    opacity : 0;
    transition : .5s;
    /* The opacity sets the opacity level for an element. The opacity-level describes the transparency-level */
}

.back-profile:hover p{
    opacity : 1;
    transform : translateX(-50%) scale(1);
    top : -1.8rem;
}

